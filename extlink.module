<?php
/**
 * @file
 * Determine behavior and appearance for external links.
 */

/**
 * Implements hook_permission().
 */
function extlink_permission() {
  return array(
    'administer external link' => array(
      'title' => t('Administer External Links'),
      'description' => t('Configure external links.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function extlink_menu() {
  $items = array();
  $items['admin/config/user-interface/extlink'] = array(
    'title' => 'External links',
    'description' => 'Alter the display of external links on the site.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('extlink_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer external link'),
  );
  return $items;
}

/**
 * Implements hook_preprocess_page().
 */
function extlink_preprocess_page(&$variables) {
  $config = config('extlink.settings');
  backdrop_add_js(array('extlink' => array(
    'extTarget' => $config->get('target'),
    'extClass' => $config->get('class'),
    'extLabel' => check_plain(t($config->get('label'))),
    'extImgClass' => $config->get('img_class'),
    'extIconPlacement' => $config->get('icon_placement'),
    'extSubdomains' => $config->get('subdomains'),
    'extExclude' => implode('|', array_filter(array(
      $config->get('exclude'),
      $config->get('exclude_internal_pattern'),
    ))),
    'extInclude' => implode('|', array_filter(array(
      $config->get('include'),
      $config->get('include_internal_pattern'),
    ))),
    'extCssExclude' => $config->get('css_exclude'),
    'extCssExplicit' => $config->get('css_explicit'),
    'extAlert' => $config->get('alert'),
    'extAlertText' => $config->get('alert_text'),
    'mailtoClass' => $config->get('mailto_class'),
    'mailtoLabel' => check_plain(t($config->get('mailto_label'))),
  )), 'setting');
}

/**
 * Implements hook_config_info().
 */
function extlink_config_info() {
  $prefixes['extlink.settings'] = array(
    'label' => t('External links settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Page callback: Constructs a form for the admin settings.
 *
 * @see extlink_menu()
 */
function extlink_admin_settings() {
  $form = array();
  $config = config('extlink.settings');

  $form['extlink_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Place an icon next to external links.'),
    '#return_value' => 'ext',
    '#default_value' => $config->get('class'),
    '#description' => t('Places a !icon icon next to external links.', array(
      '!icon' => '<span class="ext" alt="External links icon"></span>&nbsp;',
    )),
  );
  $form['extlink_mailto_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Place an icon next to mailto links.'),
    '#return_value' => 'mailto',
    '#default_value' => $config->get('mailto_class'),
    '#description' => t('Places a !icon icon next to mailto links.', array(
      '!icon' => '<span class="mailto" alt="Email links icon"></span>&nbsp;',
    )),
  );
  $form['extlink_img_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Place an icon next to image links.'),
    '#return_value' => TRUE,
    '#default_value' => $config->get('img_class'),
    '#description' => t('If checked, images wrapped in an anchor tag will be treated as external links.'),
  );
  $form['extlink_use_font_awesome'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Font Awesome icons instead of images.'),
    '#return_value' => TRUE,
    '#default_value' => $config->get('use_font_awesome'),
    '#description' => t('Add Font Awesome classes to the link as well as an i tag rather than images.'),
  );
  $form['extlink_icon_placement'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add icon in front of any processed link'),
    '#return_value' => 'prepend',
    '#default_value' => $config->get('icon_placement'),
    '#description' => t('If checked, the icon will be placed in front of any external link, otherwise it will be placed behind it.'),
  );
  $form['extlink_subdomains'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude links with the same primary domain.'),
    '#default_value' => $config->get('subdomains'),
    '#description' => t("For example, a link from 'www.example.com' to the subdomain of 'my.example.com' would be excluded."),
  );
  $form['extlink_target'] = array(
    '#type' => 'checkbox',
    '#title' => t('Open external links in a new window.'),
    '#return_value' => '_blank',
    '#default_value' => $config->get('target'),
  );
  $form['extlink_alert'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display a pop-up warning when any external link is clicked.'),
    '#return_value' => '_blank',
    '#default_value' => $config->get('alert'),
  );
  $form['extlink_alert_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Text to display in the pop-up warning box.'),
    '#rows' => 3,
    '#default_value' => $config->get('alert_text'),
    '#wysiwyg' => FALSE,
    '#states' => array(
      // Only show this field when user opts to display a pop-up warning.
      'visible' => array(
        ':input[name="extlink_alert"]' => array('checked' => TRUE),
      ),
    ),
  );

  $patterns = array(
    '<code>(example\.com)</code> ' . t('Matches example.com.'),
    '<code>(example\.com)|(example\.net)</code> ' . t('Multiple patterns can be strung together by using a pipe. Matches example.com OR example.net.'),
    '<code>(links/goto/[0-9]+/[0-9]+)</code> ' . t('Matches links that go through the <a href="https://drupal.org/project/links">Links module</a> redirect.'),
  );
  $wildcards = array(
    '<code>.</code> ' . t('Matches any character.'),
    '<code>?</code> ' . t('The previous character or set is optional.'),
    '<code>\d</code> ' . t('Matches any digit (0-9).'),
    '<code>[a-z]</code> ' . t('Brackets may be used to match a custom set of characters. This matches any alphabetic letter.'),
  );
  $form['patterns'] = array(
    '#tree' => FALSE,
    '#type' => 'fieldset',
    '#title' => t('Pattern matching'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => '<p>' . t('External links uses patterns (regular expressions) to match the "href" property of links.') . '</p>' . t('Here are some common patterns.') .
    theme('item_list', array('items' => $patterns)) . t('Common special characters:') .
    theme('item_list', array('items' => $wildcards)) . '<p>' . t('All special characters (!characters) must also be escaped with backslashes. Patterns are not case-sensitive. Any <a href="http://www.javascriptkit.com/javatutors/redev2.shtml">pattern supported by JavaScript</a> may be used.', array('!characters' => '<code>^ $ . ? ( ) | * +</code>')) . '</p>',
  );
  $form['patterns']['extlink_exclude'] = array(
    '#type' => 'textfield',
    '#title' => t('Exclude links matching the pattern'),
    '#maxlength' => NULL,
    '#default_value' => $config->get('exclude'),
    '#description' => t('Enter a regular expression for links that you wish to exclude from being considered external.'),
  );
  $form['patterns']['extlink_exclude_internal'] = array(
    '#type' => 'textarea',
    '#title' => t('Exclude internal paths'),
    '#default_value' => $config->get('exclude_internal'),
    '#description' => t('Enter internal paths, one per line, that should be excluded, eg. node/1.'),
  );
  $form['patterns']['extlink_include'] = array(
    '#type' => 'textfield',
    '#title' => t('Include links matching the pattern'),
    '#maxlength' => NULL,
    '#default_value' => $config->get('include'),
    '#description' => t('Enter a regular expression for internal links that you wish to be considered external.'),
  );
  $form['patterns']['extlink_include_internal'] = array(
    '#type' => 'textarea',
    '#title' => t('Include internal paths'),
    '#default_value' => $config->get('include_internal'),
    '#description' => t('Enter internal paths, one per line, that should be included, eg. node/1.'),
  );

  $form['css_matching'] = array(
    '#tree' => FALSE,
    '#type' => 'fieldset',
    '#title' => t('CSS Matching'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => '<p>' . t('Use CSS selectors to exclude entirely or only look inside explicitly specified classes and IDs for external links.  These will be passed straight to jQuery for matching.') . '</p>',
  );
  $form['css_matching']['extlink_css_exclude'] = array(
    '#type' => 'textarea',
    '#title' => t('Exclude links inside these CSS selectors'),
    '#maxlength' => NULL,
    '#default_value' => $config->get('css_exclude'),
    '#description' => t('Enter a comma-separated list of CSS selectors (ie "#block-block-2 .content, ul.menu")'),
  );
  $form['css_matching']['extlink_css_explicit'] = array(
    '#type' => 'textarea',
    '#title' => t('Only look for links inside these CSS selectors'),
    '#maxlength' => NULL,
    '#default_value' => $config->get('css_explicit'),
    '#description' => t('Enter a comma-separated list of CSS selectors (ie "#block-block-2 .content, ul.menu")'),
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  return $form;
}

/**
 * Form validation handler for extlink_admin_settings().
 *
 * @see extlink_admin_settings_submit()
 */
function extlink_admin_settings_validate($form, &$form_state) {
  // Check if the exclude pattern is a valid regular expression.
  if ($exclude = $form_state['values']['extlink_exclude']) {
    // Testing the regex via replace.
    $regexeval = @preg_replace('/' . $exclude . '/', '', 'Lorem ipsum');
    // If the regex returns NULL, then throw an error and reset the variable.
    if ($regexeval === NULL) {
      form_set_error('extlink_exclude', t('Invalid regular expression.'));
    }
  }
  // Check if the include pattern is a valid regular expression.
  if ($include = $form_state['values']['extlink_include']) {
    // Testing the regex via replace.
    $regexeval = @preg_replace('/' . $include . '/', '', 'Lorem ipsum');
    // If the regex returns NULL, then throw an error and reset the variable.
    if ($regexeval === NULL) {
      form_set_error('extlink_include', t('Invalid regular expression.'));
    }
  }
}

/**
 * Form submission handler for extlink_admin_settings().
 *
 * @see extlink_admin_settings_validate()
 */
function extlink_admin_settings_submit($form, &$form_state) {
  $values = $form_state['values'];
  $config = config('extlink.settings');

  backdrop_set_message(t('Configuration options saved.'));

  // Append internal paths & aliases to exclude/include patterns.
  foreach (array('exclude', 'include') as $type) {
    $internal = $form_state['values']['extlink_' . $type . '_internal'];
    if ($internal && $internal != $config->get($type . '_internal')) {
      // Get lines.
      $internal = array_filter(preg_split("/\r\n|\n|\r/", $internal));
      // Add aliases.
      $internal = array_map(function ($v) {
        $v = trim($v, '/ ');
        $ret = array(
          $v,
          backdrop_lookup_path('alias', $v),
        );
        return implode('|', array_filter($ret));
      }, $internal);
      if (!empty($internal)) {
        // Implode, add base url & escape slashes.
        global $base_url;
        $internal = $base_url . '/(' . implode('|', array_filter($internal)) . ')';
      }
      else {
        $internal = NULL;
      }
      $config->set($type . '_internal_pattern', $internal);
    }
    $config->set('class', $values['extlink_class'] ? $values['extlink_class'] : FALSE);
    $config->set('mailto_class', $values['extlink_mailto_class'] ? $values['extlink_mailto_class'] : FALSE);
    $config->set('img_class', $values['extlink_img_class'] ? $values['extlink_img_class'] : FALSE);
    $config->set('subdomains', (bool) $values['extlink_subdomains']);
    $config->set('target', $values['extlink_target'] ? $values['extlink_target'] : '');
    $config->set('alert', (bool) $values['extlink_alert']);
    $config->set('alert_text', $values['extlink_alert_text']);
    $config->set('exclude', $values['extlink_exclude']);
    $config->set('exclude_internal', $values['extlink_exclude_internal']);
    $config->set('include', $values['extlink_include']);
    $config->set('include_internal', $values['extlink_include_internal']);
    $config->set('css_exclude', $values['extlink_css_exclude']);
    $config->set('css_explicit', $values['extlink_css_explicit']);
    $config->save();
  }
}
